<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Pipes Overview on Gravity</title>
    <link>https://gohugo.io/hugo-pipes/</link>
    <description>Recent content in Hugo Pipes Overview on Gravity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://gohugo.io/hugo-pipes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Pipes Introduction</title>
      <link>https://gohugo.io/hugo-pipes/introduction/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/introduction/</guid>
      <description>Asset directory Asset files must be stored in the asset directory. This is /assets by default, but can be configured via the configuration file&amp;rsquo;s assetDir key.
From file to resource In order to process an asset with Hugo Pipes, it must be retrieved as a resource using resources.Get, which takes one argument: the filepath of the file relative to the asset directory.
{{$style:=resources.Get&amp;#34;sass/main.scss&amp;#34;}} Asset publishing Assets will only be published (to /public) if .</description>
    </item>
    
    <item>
      <title>SASS / SCSS</title>
      <link>https://gohugo.io/hugo-pipes/scss-sass/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/scss-sass/</guid>
      <description>Any SASS or SCSS file can be transformed into a CSS file using resources.ToCSS which takes two arguments, the resource object and a map of options listed below.
{{$sass:=resources.Get&amp;#34;sass/main.scss&amp;#34;}} {{$style:=$sass|resources.ToCSS}} Options  transpiler [string] New in v0.80.0  The transpiler to use, valid values are libsass (default) and dartsass. Note that the Embedded Dart Sass project is still in beta. We will try to improve the installation process when it has stable releases, but if you want to use Hugo with Dart Sass you need to download a release binary from Embedded Dart Sass (Hugo after 0.</description>
    </item>
    
    <item>
      <title>PostProcess</title>
      <link>https://gohugo.io/hugo-pipes/postprocess/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/postprocess/</guid>
      <description>Marking a resource with resources.PostProcess delays any transformations to after the build, typically because one or more of the steps in the transformation chain depends on the result of the build (e.g. files in public).New in v0.69.0
A prime use case for this is CSS purging with PostCSS.
There are currently two limitations to this:
  This only works in *.html templates (i.e. templates that produces HTML files).</description>
    </item>
    
    <item>
      <title>PostCSS</title>
      <link>https://gohugo.io/hugo-pipes/postcss/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/postcss/</guid>
      <description>Any asset file can be processed using resources.PostCSS which takes for argument the resource object and a slice of options listed below.
The resource will be processed using the project&amp;rsquo;s or theme&amp;rsquo;s own postcss.config.js or any file set with the config option.
{{$css:=resources.Get&amp;#34;css/main.css&amp;#34;}} {{$style:=$css|resources.PostCSS}} Hugo Pipe&amp;rsquo;s PostCSS requires the postcss-cli JavaScript package to be installed in the environment (npm install -g postcss postcss-cli) along with any PostCSS plugin(s) used (e.</description>
    </item>
    
    <item>
      <title>JavaScript Building</title>
      <link>https://gohugo.io/hugo-pipes/js/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/js/</guid>
      <description>Any JavaScript resource file can be transpiled and &amp;ldquo;tree shaken&amp;rdquo; using js.Build which takes for argument either a string for the filepath or a dict of options listed below.
Options  targetPath [string] If not set, the source path will be used as the base target path. Note that the target path&amp;rsquo;s extension may change if the target MIME type is different, e.g. when the source is TypeScript. params [map or slice] New in v0.</description>
    </item>
    
    <item>
      <title>Babel</title>
      <link>https://gohugo.io/hugo-pipes/babel/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/babel/</guid>
      <description>Any JavaScript resource file can be transpiled to another JavaScript version using resources.Babel which takes for argument the resource object and an optional dict of options listed below. Babel uses the babel cli.
Hugo Pipe&amp;rsquo;s Babel requires the @babel/cli and @babel/core JavaScript packages to be installed in the project or globally (npm install -g @babel/cli @babel/core) along with any Babel plugin(s) or preset(s) used (e.g., npm install @babel/preset-env --save-dev).</description>
    </item>
    
    <item>
      <title>Asset minification</title>
      <link>https://gohugo.io/hugo-pipes/minification/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/minification/</guid>
      <description>Any resource of the aforementioned types can be minified using resources.Minify which takes for argument the resource object.
{{$css:=resources.Get&amp;#34;css/main.css&amp;#34;}} {{$style:=$css|resources.Minify}} Note that you can also minify the final HTML output to /public by running hugo --minify.</description>
    </item>
    
    <item>
      <title>Asset bundling</title>
      <link>https://gohugo.io/hugo-pipes/bundling/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/bundling/</guid>
      <description>Asset files of the same MIME type can be bundled into one resource using resources.Concat which takes two arguments, a target path and a slice of resource objects.
{{$plugins:=resources.Get&amp;#34;js/plugins.js&amp;#34;}} {{$global:=resources.Get&amp;#34;js/global.js&amp;#34;}} {{$js:=slice$plugins$global|resources.Concat&amp;#34;js/bundle.js&amp;#34;}} </description>
    </item>
    
    <item>
      <title>Fingerprinting and SRI</title>
      <link>https://gohugo.io/hugo-pipes/fingerprint/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/fingerprint/</guid>
      <description>Fingerprinting and SRI can be applied to any asset file using resources.Fingerprint which takes two arguments, the resource object and a hash function.
The default hash function is sha256. Other available functions are sha384 (from Hugo 0.55), sha512 and md5.
Any so processed asset will bear a .Data.Integrity property containing an integrity string, which is made up of the name of the hash function, one hyphen and the base64-encoded hash sum.</description>
    </item>
    
    <item>
      <title>Creating a resource from template</title>
      <link>https://gohugo.io/hugo-pipes/resource-from-template/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/resource-from-template/</guid>
      <description>In order to use Hugo Pipes function on an asset file containing Go Template magic the function resources.ExecuteAsTemplate must be used.
The function takes three arguments: the resource target path, the template context, and the resource object.
// assets/sass/template.scss $backgroundColor: {{.Param&amp;#34;backgroundColor&amp;#34;}}; $textColor: {{.Param&amp;#34;textColor&amp;#34;}}; body{ background-color:$backgroundColor; color: $textColor; } // [...] {{$sassTemplate:=resources.Get&amp;#34;sass/template.scss&amp;#34;}} {{$style:=$sassTemplate|resources.ExecuteAsTemplate&amp;#34;main.scss&amp;#34;.|resources.ToCSS}} </description>
    </item>
    
    <item>
      <title>Creating a resource from a string</title>
      <link>https://gohugo.io/hugo-pipes/resource-from-string/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo.io/hugo-pipes/resource-from-string/</guid>
      <description>It is possible to create a resource directly from the template using resources.FromString which takes two arguments, the given string and the resource target path.
The following example creates a resource file containing localized variables for every project&amp;rsquo;s languages.
{{$string:=(printf&amp;#34;var rootURL = &amp;#39;%s&amp;#39;; var apiURL = &amp;#39;%s&amp;#39;;&amp;#34;(absURL&amp;#34;/&amp;#34;)(.Param&amp;#34;API_URL&amp;#34;))}} {{$targetPath:=&amp;#34;js/vars.js&amp;#34;}} {{$vars:=$string|resources.FromString$targetPath}} {{$global:=resources.Get&amp;#34;js/global.js&amp;#34;|resources.Minify}} &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;{{$vars.Permalink}}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;{{$global.Permalink}}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; </description>
    </item>
    
  </channel>
</rss>
